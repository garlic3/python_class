Day08 클래스

클래스(class)
	공통 요소(변수, 함수)를 모아 놓은것

	클래스 정의:
	class 클래스명:
	    ...
	   (필드)
	*클래스명 규칙: upper camel case 첫글자도 대문자
	MyName
	
	1. 모든 클래스는 추상적
	2. 클래스는 타입
	   -> 선언되어 있는 것을 접근해서 가져와서 사용하면 됨

필드(멤버)
	클래스 안에 있는 변수와 메서드
	필드에 접근할 때는 .(멤버변수 접근자, 하위연산자)를 사용

객체
	추상적인 개념을 구체화(실체화)시킨것

객체화 
	추상적인 개념을 구체화 하는 작업
	객체명 = 클래스()

	print(객체명.변수명) 
	
객체와 인스턴스
	피자붕어빵 = 붕어빵()

	피자붕어빵은 객체 입니다
	피자붕어빵은 붕어빵 클래스의 인스턴스(instance)입니다

생성자 
	클래스명()
	1. 메모리에 할당
	2. 초기화
	메소드와 같아 보이나 메모리에 할당시키고 주소값을 리턴하기 
	때문에 직접 return 값을 주면 안됨
	* 생성자를 생략하면 기본 생성자가 자동으로 만들어짐

인스턴스 변수
	인스턴스들이 각각 따로 저장하는 변수(self)

인스턴스 메소드
	인스턴스 변수를 사용하는 메소드
	첫번째 매개변수는 객체 자신을 의미하는 self를 가짐
	인스턴스로 호출 가능

클래스 변수
	모든 인스턴스들이 공유하는 변수
	-> 메모리 공간의 낭비를 막을 수 있음
	클래스 이름으로 접근하는것을 권장

클래스 메소드 
	@classmethod 데코레이터를 표시하고 작성
	인스턴스를 생성하지 않아도 호출 할 수 있으므로 인스턴스 변수 사용 불가
	클래스 변수를 사용하는 메소드
	첫번째 매개변수는 클래스를 의미하는 cls를 가짐
	인스턴스 또는 클래스로 호출 가능	

정적 메소드
	@staticmethod 데코레이터를 표시하고 작성
	인스턴스 변수와 클래스 변수를 모두 사용하지 않는 메소드를 정의할때
	(외부 상태에 영향을 끼치지 않는 함수를 만들때)
	반드시 작성해야 하는 매개변수가 없음
	인스턴스 또는 클래스로 호출 가능
	-> 인스턴스에 영향을 주지 않고 인스턴스로부터 영향을 받지 않음


인스턴스 변수		클래스 변수
인스턴스마다 다른값  	공유하는 값 
인스턴스 접근(O)		인스턴스 접근(O)
클래스 접근(x)		클래스 접근(O)
	

인스턴스 메소드	클래스 메소드	정적 메소드
인스턴스 호출(O)	인스턴스 호출(O)	인스턴스 호출(O)
클래스 호출(x)	클래스 호출(O)	클래스 호출(O)































































































































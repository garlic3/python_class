
상속
	어떤 클래스가 가지고 있는 기능을 물려받음
	
	사용목적
	1. 기존에 있는 클래스의 필드 중에 필요한것이 있다면 상속을 받아서 사용
	2. 여러 클래스에 중복되는 필드가 있다면 공통으로 담아놓을 클래스를 만들어서 사용
	

부모클래스, 상위클래스, 슈퍼클래스, 기반클래스: 전달하는 쪽
자식클래스, 하위클래스, 서브클래스, 파생클래스: 전달받는 쪽

상속 선언 방법
	class 부모 클래스:
	....
	
	class 자식 클래스(부모클래스):
	....

다중 상속
	class 자식 클래스(부모클래스1, 부모클래스2..):
	...

	부모 클래스의 필드명들이 겹칠 경우 어느 부모의 필드인지
	알수 없는 모호성이 발생

메소드 오버라이딩
	부모 클래스에 있는 메소드를 자식 클래스에서 수정해서 사용해야할때, 같은 이름으로 메소드를 재정의함 
	다형성을 구현하는 요소 중 하나

다형성
	같은 형태의 코드가 다른 기능을 하는것

생성자
	부모가 존재해야 자식이 존재할 수 있으므로 부모 클래스의 생성자를 호출하고 자식 클래스의 생성자를 호출해야함
	만약 자식 클래스의 생성자가 기본 생성자이면 부모 클래스의 생성자는 자동으로 호출되며 자식 클래스의 생성자를 직접
	선언하면 부모 생성자를 자식 클래스 생성자에서 직접 호출 해줘야 함
	super().__init__() 부모클래스의 생성자 호출
	*주소값을 자동으로 넘기기 때문에 self 생략

예외 처리
	예외가 발생했을때 프로그램이 비정상적으로 종료되는것을 막고
	사용자에게 정보를 전달하기 위한 처리
	
	에러: 심각한 오류
	예외: 상대적으로 덜 심각한 오류

try:
	오류가 발생할 수 있는 문장
except 오류 이름 as 별명:
	오류 발생 시 실행할 문장

모든 예외 클래스의 부모 클래스는 Exception


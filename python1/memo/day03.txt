Day03 연산자와 연산자의 우선순위 / 조건식과 삼항연산자

       
아스키 코드
   미국 정보 교환 표준 부호
   -> 사람의 문자를 컴퓨터가 인식할 수 있게 처리하는 부호 체계

   65 = 'A'
   66 = 'B'
   67 = 'C'
   ...
   chr(정수)   : 정수를 문자로 바꿀 때 사용하는 함수
   ord(문자)   : 문자를 정수로 바꿀 때 사용하는 함수


연산자
   최우선 연산자    ()
   단항 연산자   ~ (not)   
   산술 연산자   +, -, *, /, **, //, %
   쉬프트 연산자   >>, <<
   관계 연산자   >, <, >=, <=, ==, !=
   논리 연산자   and, or
   삼항 연산자   
   대입 연산자    =


산술 연산자
      + (더하기)		
      - (빼기)			
      * (곱하기)		
      / (나누기)		
      ** (거듭제곱)		
      // (정수 몫)		
      % (나머지)		
      
쉬프트 연산
   
      ========================================================
      비트: 0과 1의 값이 들어가는 컴퓨터에서 사용하는 가장 작은 정보 단위 
      10 진수: 0 ~ 9
       2 진수: 0, 1

      비트 => 전구(비트를 전구 1개라고 생각)
      장점: 사람의 언어를 기계의 언어로 바꾸는 과정을 생략하니까 속도가 빠름

   
      논리 연산자
         & (논리곱) AND 두 비트가 모두 1이면 1
         | (논리합) OR 두 비트 중 둘중 하나라도 1이면 1(=>파이프연산자)
         ^ (배타논리합) XOR 두 비트가 서로 다르면 1
      
      단항 연산자
         ~ (논리부정) NOT 0을 1로, 1을 0으로 바꿔줌
         부호비트 또한 반대로 바꿔줌(양수는 음수로, 음수는 양수로)
      
      부호 비트
         최상위 비트. 양수는 0 음수는 1

      쉬프트 연산자
         >> (A >> B) 오른쪽으로 B만큼 이동 (우쉬프트)
            -> 1/2배씩 값이 감소

	1010
	0101 -> (4 + 1 = 5)
	 
         << (A << B) 왼쪽으로 B만큼 이동 (좌쉬프트)
            -> 2배씩 값이 증가
         
	1010
	10100 -> (16 + 4 = 20)
        
         -> 빈자리가 있을때는 양수는 0으로 음수는 1로 채워줌


	ex)	
		(1) 10&11
		
		      1010
		      1011
		      -------
		      1010 => 십진수 값: 10	
		
		(2) 10|11
		      
		      1010
		      1011
		      -------
		      1011 -> 십진수 값: 11
		
		(3) 10^11

 		      1010
		      1011
		      -------
		      0001 -> 십진수 값: 1

		    
			
		(4) ~10 (부호비트도 반대로 바꾼다  = 양수를 음수로, 음수를 양수로)

		결과값: -11
   
     		   1010
		   --------
      		   0101 ->  4 + 1 = 5
   
      		   111
       		   1011 = 11 + (-11) = 0
     		   0101 => -11
	           -------
	           0000
	
	비트 연산 사용 예
		1) rgb 검은색 -> 흰색 not연산자(~)  사용
	         
		2) 193.23.11.12(ip 주소 찾기)
        			      1011
              		[0][0][0][0][0][1][0][1][1]
				 8 7 6 5 4 3 2 1 0	       
				  >>

               	   쉬프트 연산자를 통해 원하는 비트자리로 이동

	
               
	========================================================
 
관계 연산자
      > (크다, 초과)    
      < (작다, 미만)
      >= (같거나 크다, 이상)
      <= (같거나 작다, 이하)
      == (같다)
      != (같지 않다)

조건식
      참과 거짓을 판단할수 있는 식
      참이면 True
      거짓이면 False

논리 연산자
      A and B 두 조건식이 모두 참일때 참
      A or B 두 조건식 중 하나라도 참이면 참

 삼항 연산자
      참(값 또는 문장) if 조건식 else 거짓(값 또는 문장)
      삼항 연산자를 여러개 사용할 경우 줄바꿈시 (( ))안에 넣어줌




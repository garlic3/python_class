day08. 정렬 알고리즘

1. 원형 연결리스트 마저하기
2. 시간차이
3. 알고리즘 설명
4. 시간복잡도
5. 버블정렬
	- 개선 (실습)
6. 단순 선택 정렬
	- 개선 (실습)
7. 단순 삽입 정렬
	- 개선 (실습)
8. 퀵 정렬 

검색 알고리즘
-선형 검색
-이진 검색
-해시법


정렬 알고리즘
-버블 정렬
-단순 선택 정렬
-단순 삽입 정렬
-퀵 정렬





알고리즘
	문제를 해결하는 절차 또는 순서 

알고리즘의 안정성
	값이 같은 원소의 순서가 정렬전과 정렬후가 동일한 순서를 유지하는것

	*안정적인 알고리즘(안정정렬): 순서유지 O
	*안정적이지 않은 알고리즘(불안정정렬): 순서유지 X 또는 O

시간복잡도
	알고리즘의 수행시간 평가
	시간복잡도가 작은 알고리즘이 빠른 알고리즘


빅오표기법(Big-O)

	1. 최선의 경우
	2. 최악의 경우
	3. 평균적인 경우
	알고리즘이 복잡할수록 평균 복잡도를 구하기가 어려워서
	최악의 경우로 알고리즘의 성능을 파악

	*변수에 값을 할당하는 바인딩(Binding)의 시간복잡도 = O(1)
	*산술연산, 값에 대한 비교 연산들도 모두 O(1)의 시간복잡도

	O(1) < O( log n ) < O(n) < O(n log n) < O(n^2) n² < O(2^n) 2ⁿ < O(n!)

O(1) – 상수 시간 : 문제를 해결하는데 오직 한 단계만 처리함.
O(log n) – 로그 시간 : 문제를 해결하는데 필요한 단계들이 연산마다 특정 요인에 의해 줄어듬.
O(n) – 직선적 시간 : 문제를 해결하기 위한 단계의 수와 입력값 n이 1:1 관계를 가짐.
O(n log n) : 문제를 해결하기 위한 단계의 수가 N*(log2N) 번만큼의 수행시간을 가진다. (선형로그형)
O(n^2) – 2차 시간 : 문제를 해결하기 위한 단계의 수는 입력값 n의 제곱.
O(C^n) – 지수 시간 : 문제를 해결하기 위한 단계의 수는 주어진 상수값 C 의 n 제곱.

공간 복잡도
	알고리즘 수행에 필요한 메모리의 양을 평가

정렬
	데이터들을 순서대로 배열하는것 

	오름차순: 작은 데이터부터 큰 데이터까지
	내림차순: 큰 데이터부터 작은 데이터까지


내부정렬와 외부정렬
	내부정렬: 정렬할 모든 데이터를 하나의 배열에 저장할 수 있는 경우에 사용
		정렬할 자료를 메인 메모리에 올려서 정렬하는 방식
		정렬속도가 빠르지만 정렬할 수 있는 자료의 양이 메인 메모리의 용량에 따라서 제한됨

	외부정렬: 정렬할 데이터가 많고 크기가 커서 하나의 배열에 저장할 수 없는 경우에 사용
		정렬할 자료를 보조기억장치에서 정렬하는 방식. 대용량의 보조 기억 장치를 사용하기 때문에
		내부 정렬보다 속도는 떨어지지만 내부 정렬로 처리할 수 없는 대용량의 자료에 대한 정렬이 가능

버블 정렬
	인접한 두 요소의 대소 관계를 비교하여 정렬
	패스 = 원소를 비교, 교환하는 과정 
	1.
	2.
	안정정렬

	1. 오름차순 정렬
	2. 내림차순 정렬(실습)
	3. 중간에 정렬이 완료되면 중단
	4. 교환 횟수를 출력


	칵테일 셰이커 정렬(양방향 버블 정렬)
		버블 정렬을 개선한 알고리즘
		홀수번째 패스는 가장 작은 값이 맨 앞에 오도록 교환
		짝수번째 패스는 가장 큰 값이 맨 뒤에 오도록 교환

				     ★	     ★	 
	[   10	][   2	][   1	][   3	][   4	]

                         ★	     ★		      
	[   10	][   2	][   1	][   3	][   4	]
	
		     ★	     ★	     	 
	[   10	][   2	][   1	][   3	][   4	]

	    ★      ★					      
	[  10	][   1	][   2	][   3	][   4	]

	   
	[  1	][  10	][   2	][   3	][   4	]



단순 선택 정렬
	가장 작은 요소부터 알맞은 위치로 옮겨서 정렬
	1. 최소값 선택
	2. 최소값과 맨앞의 값을 비교 후 교환
	불안정 정렬

	    ★	    	    ★		     
	[   10	][   2	][  1	][   3	][   4	]

                  ★       	     ★		      
	[   10	][   2	][   1	][   3	][   4	]
	
		     ★	     ★	     	 
	[   10	][   2	][   1	][   3	][   4	]

	    ★      ★					      
	[  10	][   2	][   1	][   3	][   4	]

	
단순 삽입 정렬(= 셔틀 정렬)
	아직 정렬되지 않은 부분의 맨앞 원소를 정렬된 부분의 알맞은 위치에 삽입
	* 미리 정렬된 리스트에 새 항목을 추가할 때 좋음
	안정정렬


	    ★	     ★		     
	[   10	][   2	][  1	][   3	][   4	]

           ★      	     ★       	     		      
	[   2	][  10	][   1	][   3	][   4	]
	
	    ★	         	     ★	     	 
	[   1][   2	][10	][   3	][   4	]

	    ★     			     ★					      
	[  1	][   2	][   3	][  10	][   4	]

					      
	[  1	][   2	][   3	][  4	][  10	]



버블정렬 	선택정렬		삽입정렬
O(n²)		O(n²)		O(n²)
	

퀵 정렬
	가장 빠른 정렬 알고리즘
	피벗(중심축)을 사용
	피벗은 임의로 선택할 수 있고 선택한 피벗은 2개로 나눈 그룹 어디에 넣어도 상관없음
	피벗을 기준으로 피벗보다 작은 요소들은 왼쪽으로, 큰 요소들은 피벗의 오른쪽으로
	

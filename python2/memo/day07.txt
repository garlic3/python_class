day07 연결리스트

1. 매직메소드
2. 리스트 설명
3. 연결리스트 설명
4. 연결리스트, 리스트의 차이 설명
5. 단순 연결리스트 설명
6. 원형 연결리스트 설명


매직메소드
	__ -> 더블 언더스코어 = 던더 
	매직메소드 또는 던더 메소드라고 함
	이미 파이썬 내부적으로 만들어진 메소드

	__contains()__ 함수
	클래스에 __contains__() 함수를 정의하면 클래스형의 인스턴스에  멤버십 판단 연산자인 in을 적용할 수 있음
	obj.__contains__(x) 를 간단하게 x in obj로 사용 가능

	__len__() 함수
	클래스에 __len__() 함수를 정의하면 클래스형의 인스턴스를 len()함수에 전달할 수 있음
	obj.__len__()을 간단하게 len(obj)로 작성할 수 있음

	파이썬 클래스안에서 다른 메소드 부를때는 self.메소드명()

is : 변수의 Object(객체)가 같을 때 True
== : 변수의 values(값)이 같을 때 True
== 


프라이빗 필드 또는 프라이빗 메소드
	변수나 메소드명 앞에 __ (더블언더바)를 붙임
	객체 내부에서만 사용(클래스 내부에서만 접근 가능. 외부에서 접근 불가)

리스트(배열기반. 연속방식) 
	저장 공간의 연속성이 있음. 인덱스를 사용하여 바로 접근할수 있음
	요소 하나당 필요한 공간이 작음
	총 데이터의 개수를 모를 경우, 수용할 수 있는 충분한 크기를 만들어야 하므로 데이터 개수가 적을 경우 공간의 낭비가 발생
	데이터의 개수가 만들어둔 리스트의 크기보다 클 경우 더 큰 크기의 배열로 값을 옮겨야 함

	ADT
	1. i번째 자리에 데이터 삽입
	2. 마지막 자리에 데이터 삽입
	3. i번째 자리 데이터 삭제
	4. 데이터 x 삭제
	5. 데이터 x의 인덱스 반환
	6. 데이터 x의 개수 반환

	구현
	1. insert(i,data)
	2. append(data)
	3. pop(i)
	4. remove(data)
	5. index(data)
	6. count(data)

	
연결리스트(포인터기반. 연결방식)
	저장 공간의 연속성이 없음. 
	요소 하나당 데이터와 참조값을 가지기 때문에 필요한 공간이 리스트보다 큼
	공간의 연속성이 없기떄문에 바로 값에 접근하기 어려움(순차적으로 찾아가야함)

	노드: 기초적인 단위. 하나의 요소
	데이터(값)과 다음 노드를 참조하는 주소값을 가지고 있음
	
	[데이터]	[데이터]	[데이터]
	[주소값]	[주소값]	[주소값]

	머리노드(head node) : 첫번째 노드
	꼬리노드(tail node) : 마지막 노드

	ADT
	1. i번째 자리에 데이터 삽입
	2. 마지막 자리에 데이터 삽입
	3. i번째 자리 데이터 삭제
	4. 데이터 x 삭제
	5. 데이터 x의 인덱스 반환
	6. 데이터 x의 개수 반환
	7. 데이터의 총개수 
	8. 비어있는지 확인
	9. 모든 데이터 삭제
	10. 모든 데이터 출력
	
	
	Node 클래스
	1. data 데이터
	2. next 다음 노드의 주소값

	LinkedList 클래스
	1. head 머리노드
	2. node_num 노드의 개수 
	3. 연산

원형 이중 연결리스트

	원형 연결 리스트
	1. 꼬리노드와 머리노드를 참조하는 구조
	머리노드와 꼬리노드를 쉽게 찾을수 있기 때문에 금방 찾을수 있음

	이중 연결 리스트(양뱡항 리스트)
	2. 각 노드를 데이터, 앞쪽 노드에 대한 주소값, 뒤쪽노드에 대한 주소값으로 구성
	단점. 메모리를 더 사용하게 됨

	단순 연결 리스트에서는 꼬리 노드에 접근하려면 추가적인 시간이 발생
	


	

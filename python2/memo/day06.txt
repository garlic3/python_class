day06 스택, 큐 

추상 자료형, 추상 데이터 타입(Abstract Data Type, ADT)
	자료와 자료에 대한 연산들만 추상적으로 정의한것
	Characters: 자료의 속성(구성 요소)
	Operations: 자료의 연산(로직)
	추상 자료형을 구체적으로 구현한 것을 자료구조라고 함

* 데이터와 연산만 만족하면 구현은 정해진 방법이 없음
* 사용자는 사용은 할 수 있지만 내부적으로 어떻게 구현되는지는 알수 없음
* 내부의 데이터를 보호하고 내부적으로 코드가 변경되더라도 여전히 사용할 수 있음
* 사용 설명서


알고리즘
	문제를 해결하는 절차 또는 순서

자료구조
	데이터를 효율적으로 관리 할 수 있게 조직화시켜 저장하는 방법

	단순 구조: 문자열, 실수, 정수 등
	
	복합 자료구조
	1. 선형 자료구조: 자료가 순차적으로 나열된 형태
		리스트(배열 기반. 연속 방식)
		연결리스트(포인터 기반. 연결 방식)
		스택
		큐
		덱
		
	2.비선형 자료구조: 자료가 순차적이지 않고 복잡한 연결 관계를 갖는 형태. 트리, 그래프 등

스택(Stack)
	가장 마지막에 넣은 데이터를 가장 먼저 꺼내는 구조
	후입선출(LIFO, Last In First Out)
	실행취소(Ctrl + z, undo)
	웹 브라우저 방문기록(뒤로가기)
	재귀적 알고리즘( 재귀함수: 자기 자신을 다시 호출하는 함수)

	필요 연산
		1. create(size): 스택을 생성 (초기화)
		2. is_empty() 스택이 비어있다면 true, 아니라면 false
		3 is_full() 스택이 다 찼다면 true, 아니라면 false
		4. push(item): 만약 size을 초과한다면 false
		5. pop() :top에 위치한 item을 반환하면서 제거
		6. peek(): top에 위치한 item을 반환

		top: 스택의 윗부분(푸시하고 팝하는 부분)
		bottom: 아랫부분(인덱스가 0인 원소)
		capacity: 스택의 크기 
		
		스택 포인터: 스택에 쌓여 있는 데이터의 개수
		
		스택에서의 예외처리
		1. 빈 스택 에서 데이터를 꺼내려고 할때
		2. 가득찬 스택에 데이터를 넣으려고 할 때

* 초기화(배열의 크기)
* 데이터 개수
* is_empty() 스택이 비어있는지 판단
* is_full() 스택이 가득 차 있는지 판단
* 데이터 푸시
* 데이터 픽
* 데이터 팝
* 모든 데이터 삭제
* 데이터 검색(꼭대기 -> 바닥 선형검색)
* 모든 데이터를 출력(바닥 -> 꼭대기) 

	* 괄호열 문제
	* 회문 문제


큐(Queue)
	가장 먼저 넣은 데이터를 가장 먼저 꺼내는 구조
	선입선출(FIFO, First In First Out)
	프린터의 출력 처리(스풀링)
	프로세스 관리 
	
	필요 연산
		1. create(size) : 큐를 생성(초기화)
		2. is_empty() 비어있다면 true, 아니라면 false
		3. is_full() 다 찼다면 true, 아니라면 false
		4. enqueue:() 큐에 데이터를 추가
		5. dequeue(): 큐에서 데이터를 꺼내기
		6. peek(): 맨 처음 데이터를 삭제하지 않고 반환(디큐에서 꺼낼 데이터)

		front: 데이터를 꺼내는 쪽(맨앞)
		rear: 데이터를 넣는 쪽(맨뒤)


	파이썬 큐 라이브러리
		https://docs.python.org/ko/3/library/queue.html
		import queue
		Queue: 일반적인 큐 구조
		LifoQueue : 스택처럼 후입선출 되는 큐 구조
		PriorityQueue: 데이터에 우선순위를 넣어 우선순위가 높은순으로 출력
		
		qsize()
			큐의 사이즈
		empty()
			비어있으면 True, 아니면 False
		full()
			가득차있으면 True, 아니면 False
		put()
			데이터 넣기
		get()
			항목을 제거하고 반환


	링 버퍼(Ring Buffer)
		요소를 앞쪽으로 이동시키지 않는 큐
		맨끝과 맨앞이 연결되는 자료구조

		식별하기 위한 변수 

		front: 첫번째 요소의 인덱스(디큐 할 위치)
		rear: 마지막 요소 하나 뒤의 인덱스(인큐 될 위치)
		
	
	매직메소드
	__ -> 더블 언더스코어 = 던더 
	매직메소드 또는 던더 메소드라고 함
	이미 파이썬 내부적으로 만들어진 메소드

	__contains()__ 함수
	클래스에 __contains__() 함수를 정의하면 클래스형의 인스턴스에  멤버십 판단 연산자인 in을 적용할 수 있음
	obj.__contains__(x) 를 간단하게 x in obj로 사용 가능

	__len__() 함수
	클래스에 __len__() 함수를 정의하면 클래스형의 인스턴스를 len()함수에 전달할 수 있음
	obj.__len__()을 간단하게 len(obj)로 작성할 수 있음

	파이썬 클래스안에서 다른 메소드 부를때는 self.메소드명()





		
